--!native
--!optimize 2
--!nocheck
--!nolint
--#selene: allow(unused_variable, global_usage)
-- Server generated by Zap v0.6.17 (https://github.com/red-blox/zap)
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")

local outgoing_buff: buffer
local outgoing_used: number
local outgoing_size: number
local outgoing_inst: { Instance }
local outgoing_apos: number

local incoming_buff: buffer
local incoming_read: number
local incoming_inst: { Instance }
local incoming_ipos: number

-- thanks to https://dom.rojo.space/binary.html#cframe
local CFrameSpecialCases = {
	CFrame.Angles(0, 0, 0),
	CFrame.Angles(math.rad(90), 0, 0),
	CFrame.Angles(0, math.rad(180), math.rad(180)),
	CFrame.Angles(math.rad(-90), 0, 0),
	CFrame.Angles(0, math.rad(180), math.rad(90)),
	CFrame.Angles(0, math.rad(90), math.rad(90)),
	CFrame.Angles(0, 0, math.rad(90)),
	CFrame.Angles(0, math.rad(-90), math.rad(90)),
	CFrame.Angles(math.rad(-90), math.rad(-90), 0),
	CFrame.Angles(0, math.rad(-90), 0),
	CFrame.Angles(math.rad(90), math.rad(-90), 0),
	CFrame.Angles(0, math.rad(90), math.rad(180)),
	CFrame.Angles(0, math.rad(-90), math.rad(180)),
	CFrame.Angles(0, math.rad(180), math.rad(0)),
	CFrame.Angles(math.rad(-90), math.rad(-180), math.rad(0)),
	CFrame.Angles(0, math.rad(0), math.rad(180)),
	CFrame.Angles(math.rad(90), math.rad(180), math.rad(0)),
	CFrame.Angles(0, math.rad(0), math.rad(-90)),
	CFrame.Angles(0, math.rad(-90), math.rad(-90)),
	CFrame.Angles(0, math.rad(-180), math.rad(-90)),
	CFrame.Angles(0, math.rad(90), math.rad(-90)),
	CFrame.Angles(math.rad(90), math.rad(90), 0),
	CFrame.Angles(0, math.rad(90), 0),
	CFrame.Angles(math.rad(-90), math.rad(90), 0),
}

local function alloc(len: number)
	if outgoing_used + len > outgoing_size then
		while outgoing_used + len > outgoing_size do
			outgoing_size = outgoing_size * 2
		end

		local new_buff = buffer.create(outgoing_size)
		buffer.copy(new_buff, 0, outgoing_buff, 0, outgoing_used)

		outgoing_buff = new_buff
	end

	outgoing_apos = outgoing_used
	outgoing_used = outgoing_used + len

	return outgoing_apos
end

local function read(len: number)
	local pos = incoming_read
	incoming_read = incoming_read + len

	return pos
end

local function save()
	return {
		buff = outgoing_buff,
		used = outgoing_used,
		size = outgoing_size,
		inst = outgoing_inst,
	}
end

local function load(data: {
	buff: buffer,
	used: number,
	size: number,
	inst: { Instance },
})
	outgoing_buff = data.buff
	outgoing_used = data.used
	outgoing_size = data.size
	outgoing_inst = data.inst
end

local function load_empty()
	outgoing_buff = buffer.create(64)
	outgoing_used = 0
	outgoing_size = 64
	outgoing_inst = {}
end

load_empty()

local types = {}
if not RunService:IsRunning() then
	local noop = function() end
	return table.freeze({
		send_events = noop,
		client_ready = table.freeze({
			on = noop
		}),
		replicate_world = table.freeze({
			fire = noop,
			fire_all = noop,
			fire_except = noop,
			fire_list = noop,
			fire_set = noop
		}),
		udp_replicate_world = table.freeze({
			fire = noop,
			fire_all = noop,
			fire_except = noop,
			fire_list = noop,
			fire_set = noop
		}),
	}) :: Events
end
local Players = game:GetService("Players")

if RunService:IsClient() then
	error("Cannot use the server module on the client!")
end

local remotes = ReplicatedStorage:FindFirstChild("ZAP")
if remotes == nil then
	remotes = Instance.new("Folder")
	remotes.Name = "ZAP"
	remotes.Parent = ReplicatedStorage
end

local reliable = remotes:FindFirstChild("ZAP_RELIABLE")
if reliable == nil then
	reliable = Instance.new("RemoteEvent")
	reliable.Name = "ZAP_RELIABLE"
	reliable.Parent = remotes
end

local function getOrCreateUnreliableRemote(name: string): UnreliableRemoteEvent
	local remote = remotes:FindFirstChild(name)

	if remote == nil then
		remote = Instance.new("UnreliableRemoteEvent")
		remote.Name = name
		remote.Parent = remotes
	end

	return remote
end

local unreliable = { getOrCreateUnreliableRemote("ZAP_UNRELIABLE_0") }
assert(unreliable[1]:IsA("UnreliableRemoteEvent"), "Expected ZAP_UNRELIABLE_0 to be an UnreliableRemoteEvent")
local player_map = {}

local function load_player(player: Player)
	if player_map[player] then
		load(player_map[player])
	else
		load_empty()
	end
end

Players.PlayerRemoving:Connect(function(player)
	player_map[player] = nil
end)

local function send_events()
	for player, outgoing in player_map do
		if outgoing.used > 0 then
			local buff = buffer.create(outgoing.used)
			buffer.copy(buff, 0, outgoing.buff, 0, outgoing.used)

			reliable:FireClient(player, buff, outgoing.inst)

			outgoing.buff = buffer.create(64)
			outgoing.used = 0
			outgoing.size = 64
			table.clear(outgoing.inst)
		end
	end
end

RunService.Heartbeat:Connect(send_events)

local reliable_events = table.create(1)
reliable_events[0] = {}
reliable.OnServerEvent:Connect(function(player, buff, inst)
	incoming_buff = buff
	incoming_inst = inst
	incoming_read = 0
	incoming_ipos = 0
	local len = buffer.len(buff)
	while incoming_read < len do
		local id = buffer.readu8(buff, read(1))
		if id == 0 then
			local value
			for _, cb in reliable_events[0] do
				cb(player, value)
			end
		else
			error("Unknown event id")
		end
	end
end)
local returns = {
	send_events = send_events,
	replicate_world = {
		fire = function(player: Player, value: ({
			changes: ({ [(string)]: ({
				added_or_changed: ({
					entities: ({ (number) }),
					values: ({ ((unknown)) }),
				}),
				removed: ({ (number) }),
			}) }),
			destroyed: ({ (number) }),
		}))
			load_player(player)
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			local len_pos_1 = alloc(2)
			local len_1 = 0
			for k_1, v_1 in value.changes do
				len_1 = len_1 + 1
				local len_2 = #k_1
				alloc(2)
				buffer.writeu16(outgoing_buff, outgoing_apos, len_2)
				alloc(len_2)
				buffer.writestring(outgoing_buff, outgoing_apos, k_1, len_2)
				local len_3 = #v_1.added_or_changed.entities
				alloc(2)
				buffer.writeu16(outgoing_buff, outgoing_apos, len_3)
				for i_1 = 1, len_3 do
					local val_1 = v_1.added_or_changed.entities[i_1]
					alloc(4)
					buffer.writeu32(outgoing_buff, outgoing_apos, val_1)
				end
				local len_4 = #v_1.added_or_changed.values
				alloc(2)
				buffer.writeu16(outgoing_buff, outgoing_apos, len_4)
				for i_2 = 1, len_4 do
					local val_2 = v_1.added_or_changed.values[i_2]
					if val_2 == nil then
						alloc(1)
						buffer.writeu8(outgoing_buff, outgoing_apos, 0)
					else
						alloc(1)
						buffer.writeu8(outgoing_buff, outgoing_apos, 1)
						table.insert(outgoing_inst, val_2)
					end
				end
				local len_5 = #v_1.removed
				alloc(2)
				buffer.writeu16(outgoing_buff, outgoing_apos, len_5)
				for i_3 = 1, len_5 do
					local val_3 = v_1.removed[i_3]
					alloc(4)
					buffer.writeu32(outgoing_buff, outgoing_apos, val_3)
				end
			end
			buffer.writeu16(outgoing_buff, len_pos_1, len_1)
			local len_6 = #value.destroyed
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_6)
			for i_4 = 1, len_6 do
				local val_4 = value.destroyed[i_4]
				alloc(4)
				buffer.writeu32(outgoing_buff, outgoing_apos, val_4)
			end
			player_map[player] = save()
		end,
		fire_all = function(value: ({
			changes: ({ [(string)]: ({
				added_or_changed: ({
					entities: ({ (number) }),
					values: ({ ((unknown)) }),
				}),
				removed: ({ (number) }),
			}) }),
			destroyed: ({ (number) }),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			local len_pos_2 = alloc(2)
			local len_7 = 0
			for k_2, v_2 in value.changes do
				len_7 = len_7 + 1
				local len_8 = #k_2
				alloc(2)
				buffer.writeu16(outgoing_buff, outgoing_apos, len_8)
				alloc(len_8)
				buffer.writestring(outgoing_buff, outgoing_apos, k_2, len_8)
				local len_9 = #v_2.added_or_changed.entities
				alloc(2)
				buffer.writeu16(outgoing_buff, outgoing_apos, len_9)
				for i_5 = 1, len_9 do
					local val_5 = v_2.added_or_changed.entities[i_5]
					alloc(4)
					buffer.writeu32(outgoing_buff, outgoing_apos, val_5)
				end
				local len_10 = #v_2.added_or_changed.values
				alloc(2)
				buffer.writeu16(outgoing_buff, outgoing_apos, len_10)
				for i_6 = 1, len_10 do
					local val_6 = v_2.added_or_changed.values[i_6]
					if val_6 == nil then
						alloc(1)
						buffer.writeu8(outgoing_buff, outgoing_apos, 0)
					else
						alloc(1)
						buffer.writeu8(outgoing_buff, outgoing_apos, 1)
						table.insert(outgoing_inst, val_6)
					end
				end
				local len_11 = #v_2.removed
				alloc(2)
				buffer.writeu16(outgoing_buff, outgoing_apos, len_11)
				for i_7 = 1, len_11 do
					local val_7 = v_2.removed[i_7]
					alloc(4)
					buffer.writeu32(outgoing_buff, outgoing_apos, val_7)
				end
			end
			buffer.writeu16(outgoing_buff, len_pos_2, len_7)
			local len_12 = #value.destroyed
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_12)
			for i_8 = 1, len_12 do
				local val_8 = value.destroyed[i_8]
				alloc(4)
				buffer.writeu32(outgoing_buff, outgoing_apos, val_8)
			end
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in Players:GetPlayers() do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
		fire_except = function(except: Player, value: ({
			changes: ({ [(string)]: ({
				added_or_changed: ({
					entities: ({ (number) }),
					values: ({ ((unknown)) }),
				}),
				removed: ({ (number) }),
			}) }),
			destroyed: ({ (number) }),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			local len_pos_3 = alloc(2)
			local len_13 = 0
			for k_3, v_3 in value.changes do
				len_13 = len_13 + 1
				local len_14 = #k_3
				alloc(2)
				buffer.writeu16(outgoing_buff, outgoing_apos, len_14)
				alloc(len_14)
				buffer.writestring(outgoing_buff, outgoing_apos, k_3, len_14)
				local len_15 = #v_3.added_or_changed.entities
				alloc(2)
				buffer.writeu16(outgoing_buff, outgoing_apos, len_15)
				for i_9 = 1, len_15 do
					local val_9 = v_3.added_or_changed.entities[i_9]
					alloc(4)
					buffer.writeu32(outgoing_buff, outgoing_apos, val_9)
				end
				local len_16 = #v_3.added_or_changed.values
				alloc(2)
				buffer.writeu16(outgoing_buff, outgoing_apos, len_16)
				for i_10 = 1, len_16 do
					local val_10 = v_3.added_or_changed.values[i_10]
					if val_10 == nil then
						alloc(1)
						buffer.writeu8(outgoing_buff, outgoing_apos, 0)
					else
						alloc(1)
						buffer.writeu8(outgoing_buff, outgoing_apos, 1)
						table.insert(outgoing_inst, val_10)
					end
				end
				local len_17 = #v_3.removed
				alloc(2)
				buffer.writeu16(outgoing_buff, outgoing_apos, len_17)
				for i_11 = 1, len_17 do
					local val_11 = v_3.removed[i_11]
					alloc(4)
					buffer.writeu32(outgoing_buff, outgoing_apos, val_11)
				end
			end
			buffer.writeu16(outgoing_buff, len_pos_3, len_13)
			local len_18 = #value.destroyed
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_18)
			for i_12 = 1, len_18 do
				local val_12 = value.destroyed[i_12]
				alloc(4)
				buffer.writeu32(outgoing_buff, outgoing_apos, val_12)
			end
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in Players:GetPlayers() do
				if player ~= except then
					load_player(player)
					alloc(used)
					buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
					table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
					player_map[player] = save()
				end
			end
		end,
		fire_list = function(list: { Player }, value: ({
			changes: ({ [(string)]: ({
				added_or_changed: ({
					entities: ({ (number) }),
					values: ({ ((unknown)) }),
				}),
				removed: ({ (number) }),
			}) }),
			destroyed: ({ (number) }),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			local len_pos_4 = alloc(2)
			local len_19 = 0
			for k_4, v_4 in value.changes do
				len_19 = len_19 + 1
				local len_20 = #k_4
				alloc(2)
				buffer.writeu16(outgoing_buff, outgoing_apos, len_20)
				alloc(len_20)
				buffer.writestring(outgoing_buff, outgoing_apos, k_4, len_20)
				local len_21 = #v_4.added_or_changed.entities
				alloc(2)
				buffer.writeu16(outgoing_buff, outgoing_apos, len_21)
				for i_13 = 1, len_21 do
					local val_13 = v_4.added_or_changed.entities[i_13]
					alloc(4)
					buffer.writeu32(outgoing_buff, outgoing_apos, val_13)
				end
				local len_22 = #v_4.added_or_changed.values
				alloc(2)
				buffer.writeu16(outgoing_buff, outgoing_apos, len_22)
				for i_14 = 1, len_22 do
					local val_14 = v_4.added_or_changed.values[i_14]
					if val_14 == nil then
						alloc(1)
						buffer.writeu8(outgoing_buff, outgoing_apos, 0)
					else
						alloc(1)
						buffer.writeu8(outgoing_buff, outgoing_apos, 1)
						table.insert(outgoing_inst, val_14)
					end
				end
				local len_23 = #v_4.removed
				alloc(2)
				buffer.writeu16(outgoing_buff, outgoing_apos, len_23)
				for i_15 = 1, len_23 do
					local val_15 = v_4.removed[i_15]
					alloc(4)
					buffer.writeu32(outgoing_buff, outgoing_apos, val_15)
				end
			end
			buffer.writeu16(outgoing_buff, len_pos_4, len_19)
			local len_24 = #value.destroyed
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_24)
			for i_16 = 1, len_24 do
				local val_16 = value.destroyed[i_16]
				alloc(4)
				buffer.writeu32(outgoing_buff, outgoing_apos, val_16)
			end
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in list do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
		fire_set = function(set: { [Player]: true }, value: ({
			changes: ({ [(string)]: ({
				added_or_changed: ({
					entities: ({ (number) }),
					values: ({ ((unknown)) }),
				}),
				removed: ({ (number) }),
			}) }),
			destroyed: ({ (number) }),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			local len_pos_5 = alloc(2)
			local len_25 = 0
			for k_5, v_5 in value.changes do
				len_25 = len_25 + 1
				local len_26 = #k_5
				alloc(2)
				buffer.writeu16(outgoing_buff, outgoing_apos, len_26)
				alloc(len_26)
				buffer.writestring(outgoing_buff, outgoing_apos, k_5, len_26)
				local len_27 = #v_5.added_or_changed.entities
				alloc(2)
				buffer.writeu16(outgoing_buff, outgoing_apos, len_27)
				for i_17 = 1, len_27 do
					local val_17 = v_5.added_or_changed.entities[i_17]
					alloc(4)
					buffer.writeu32(outgoing_buff, outgoing_apos, val_17)
				end
				local len_28 = #v_5.added_or_changed.values
				alloc(2)
				buffer.writeu16(outgoing_buff, outgoing_apos, len_28)
				for i_18 = 1, len_28 do
					local val_18 = v_5.added_or_changed.values[i_18]
					if val_18 == nil then
						alloc(1)
						buffer.writeu8(outgoing_buff, outgoing_apos, 0)
					else
						alloc(1)
						buffer.writeu8(outgoing_buff, outgoing_apos, 1)
						table.insert(outgoing_inst, val_18)
					end
				end
				local len_29 = #v_5.removed
				alloc(2)
				buffer.writeu16(outgoing_buff, outgoing_apos, len_29)
				for i_19 = 1, len_29 do
					local val_19 = v_5.removed[i_19]
					alloc(4)
					buffer.writeu32(outgoing_buff, outgoing_apos, val_19)
				end
			end
			buffer.writeu16(outgoing_buff, len_pos_5, len_25)
			local len_30 = #value.destroyed
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_30)
			for i_20 = 1, len_30 do
				local val_20 = value.destroyed[i_20]
				alloc(4)
				buffer.writeu32(outgoing_buff, outgoing_apos, val_20)
			end
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for player in set do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
	},
	udp_replicate_world = {
		fire = function(player: Player, value: ({
			changes: ({ [(string)]: ({
				added_or_changed: ({
					entities: ({ (number) }),
					values: ({ ((unknown)) }),
				}),
				removed: ({ (number) }),
			}) }),
			destroyed: ({ (number) }),
		}))
			load_empty()
			local len_pos_6 = alloc(2)
			local len_31 = 0
			for k_6, v_6 in value.changes do
				len_31 = len_31 + 1
				local len_32 = #k_6
				alloc(2)
				buffer.writeu16(outgoing_buff, outgoing_apos, len_32)
				alloc(len_32)
				buffer.writestring(outgoing_buff, outgoing_apos, k_6, len_32)
				local len_33 = #v_6.added_or_changed.entities
				alloc(2)
				buffer.writeu16(outgoing_buff, outgoing_apos, len_33)
				for i_21 = 1, len_33 do
					local val_21 = v_6.added_or_changed.entities[i_21]
					alloc(4)
					buffer.writeu32(outgoing_buff, outgoing_apos, val_21)
				end
				local len_34 = #v_6.added_or_changed.values
				alloc(2)
				buffer.writeu16(outgoing_buff, outgoing_apos, len_34)
				for i_22 = 1, len_34 do
					local val_22 = v_6.added_or_changed.values[i_22]
					if val_22 == nil then
						alloc(1)
						buffer.writeu8(outgoing_buff, outgoing_apos, 0)
					else
						alloc(1)
						buffer.writeu8(outgoing_buff, outgoing_apos, 1)
						table.insert(outgoing_inst, val_22)
					end
				end
				local len_35 = #v_6.removed
				alloc(2)
				buffer.writeu16(outgoing_buff, outgoing_apos, len_35)
				for i_23 = 1, len_35 do
					local val_23 = v_6.removed[i_23]
					alloc(4)
					buffer.writeu32(outgoing_buff, outgoing_apos, val_23)
				end
			end
			buffer.writeu16(outgoing_buff, len_pos_6, len_31)
			local len_36 = #value.destroyed
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_36)
			for i_24 = 1, len_36 do
				local val_24 = value.destroyed[i_24]
				alloc(4)
				buffer.writeu32(outgoing_buff, outgoing_apos, val_24)
			end
			local buff = buffer.create(outgoing_used)
			buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)
			unreliable[1]:FireClient(player, buff, outgoing_inst)
		end,
		fire_all = function(value: ({
			changes: ({ [(string)]: ({
				added_or_changed: ({
					entities: ({ (number) }),
					values: ({ ((unknown)) }),
				}),
				removed: ({ (number) }),
			}) }),
			destroyed: ({ (number) }),
		}))
			load_empty()
			local len_pos_7 = alloc(2)
			local len_37 = 0
			for k_7, v_7 in value.changes do
				len_37 = len_37 + 1
				local len_38 = #k_7
				alloc(2)
				buffer.writeu16(outgoing_buff, outgoing_apos, len_38)
				alloc(len_38)
				buffer.writestring(outgoing_buff, outgoing_apos, k_7, len_38)
				local len_39 = #v_7.added_or_changed.entities
				alloc(2)
				buffer.writeu16(outgoing_buff, outgoing_apos, len_39)
				for i_25 = 1, len_39 do
					local val_25 = v_7.added_or_changed.entities[i_25]
					alloc(4)
					buffer.writeu32(outgoing_buff, outgoing_apos, val_25)
				end
				local len_40 = #v_7.added_or_changed.values
				alloc(2)
				buffer.writeu16(outgoing_buff, outgoing_apos, len_40)
				for i_26 = 1, len_40 do
					local val_26 = v_7.added_or_changed.values[i_26]
					if val_26 == nil then
						alloc(1)
						buffer.writeu8(outgoing_buff, outgoing_apos, 0)
					else
						alloc(1)
						buffer.writeu8(outgoing_buff, outgoing_apos, 1)
						table.insert(outgoing_inst, val_26)
					end
				end
				local len_41 = #v_7.removed
				alloc(2)
				buffer.writeu16(outgoing_buff, outgoing_apos, len_41)
				for i_27 = 1, len_41 do
					local val_27 = v_7.removed[i_27]
					alloc(4)
					buffer.writeu32(outgoing_buff, outgoing_apos, val_27)
				end
			end
			buffer.writeu16(outgoing_buff, len_pos_7, len_37)
			local len_42 = #value.destroyed
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_42)
			for i_28 = 1, len_42 do
				local val_28 = value.destroyed[i_28]
				alloc(4)
				buffer.writeu32(outgoing_buff, outgoing_apos, val_28)
			end
			local buff = buffer.create(outgoing_used)
			buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)
			unreliable[1]:FireAllClients(buff, outgoing_inst)
		end,
		fire_except = function(except: Player, value: ({
			changes: ({ [(string)]: ({
				added_or_changed: ({
					entities: ({ (number) }),
					values: ({ ((unknown)) }),
				}),
				removed: ({ (number) }),
			}) }),
			destroyed: ({ (number) }),
		}))
			load_empty()
			local len_pos_8 = alloc(2)
			local len_43 = 0
			for k_8, v_8 in value.changes do
				len_43 = len_43 + 1
				local len_44 = #k_8
				alloc(2)
				buffer.writeu16(outgoing_buff, outgoing_apos, len_44)
				alloc(len_44)
				buffer.writestring(outgoing_buff, outgoing_apos, k_8, len_44)
				local len_45 = #v_8.added_or_changed.entities
				alloc(2)
				buffer.writeu16(outgoing_buff, outgoing_apos, len_45)
				for i_29 = 1, len_45 do
					local val_29 = v_8.added_or_changed.entities[i_29]
					alloc(4)
					buffer.writeu32(outgoing_buff, outgoing_apos, val_29)
				end
				local len_46 = #v_8.added_or_changed.values
				alloc(2)
				buffer.writeu16(outgoing_buff, outgoing_apos, len_46)
				for i_30 = 1, len_46 do
					local val_30 = v_8.added_or_changed.values[i_30]
					if val_30 == nil then
						alloc(1)
						buffer.writeu8(outgoing_buff, outgoing_apos, 0)
					else
						alloc(1)
						buffer.writeu8(outgoing_buff, outgoing_apos, 1)
						table.insert(outgoing_inst, val_30)
					end
				end
				local len_47 = #v_8.removed
				alloc(2)
				buffer.writeu16(outgoing_buff, outgoing_apos, len_47)
				for i_31 = 1, len_47 do
					local val_31 = v_8.removed[i_31]
					alloc(4)
					buffer.writeu32(outgoing_buff, outgoing_apos, val_31)
				end
			end
			buffer.writeu16(outgoing_buff, len_pos_8, len_43)
			local len_48 = #value.destroyed
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_48)
			for i_32 = 1, len_48 do
				local val_32 = value.destroyed[i_32]
				alloc(4)
				buffer.writeu32(outgoing_buff, outgoing_apos, val_32)
			end
			local buff = buffer.create(outgoing_used)
			buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)
			for _, player in Players:GetPlayers() do
				if player ~= except then
					unreliable[1]:FireClient(player, buff, outgoing_inst)
				end
			end
		end,
		fire_list = function(list: { Player }, value: ({
			changes: ({ [(string)]: ({
				added_or_changed: ({
					entities: ({ (number) }),
					values: ({ ((unknown)) }),
				}),
				removed: ({ (number) }),
			}) }),
			destroyed: ({ (number) }),
		}))
			load_empty()
			local len_pos_9 = alloc(2)
			local len_49 = 0
			for k_9, v_9 in value.changes do
				len_49 = len_49 + 1
				local len_50 = #k_9
				alloc(2)
				buffer.writeu16(outgoing_buff, outgoing_apos, len_50)
				alloc(len_50)
				buffer.writestring(outgoing_buff, outgoing_apos, k_9, len_50)
				local len_51 = #v_9.added_or_changed.entities
				alloc(2)
				buffer.writeu16(outgoing_buff, outgoing_apos, len_51)
				for i_33 = 1, len_51 do
					local val_33 = v_9.added_or_changed.entities[i_33]
					alloc(4)
					buffer.writeu32(outgoing_buff, outgoing_apos, val_33)
				end
				local len_52 = #v_9.added_or_changed.values
				alloc(2)
				buffer.writeu16(outgoing_buff, outgoing_apos, len_52)
				for i_34 = 1, len_52 do
					local val_34 = v_9.added_or_changed.values[i_34]
					if val_34 == nil then
						alloc(1)
						buffer.writeu8(outgoing_buff, outgoing_apos, 0)
					else
						alloc(1)
						buffer.writeu8(outgoing_buff, outgoing_apos, 1)
						table.insert(outgoing_inst, val_34)
					end
				end
				local len_53 = #v_9.removed
				alloc(2)
				buffer.writeu16(outgoing_buff, outgoing_apos, len_53)
				for i_35 = 1, len_53 do
					local val_35 = v_9.removed[i_35]
					alloc(4)
					buffer.writeu32(outgoing_buff, outgoing_apos, val_35)
				end
			end
			buffer.writeu16(outgoing_buff, len_pos_9, len_49)
			local len_54 = #value.destroyed
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_54)
			for i_36 = 1, len_54 do
				local val_36 = value.destroyed[i_36]
				alloc(4)
				buffer.writeu32(outgoing_buff, outgoing_apos, val_36)
			end
			local buff = buffer.create(outgoing_used)
			buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)
			for _, player in list do
				unreliable[1]:FireClient(player, buff, outgoing_inst)
			end
		end,
		fire_set = function(set: { [Player]: true }, value: ({
			changes: ({ [(string)]: ({
				added_or_changed: ({
					entities: ({ (number) }),
					values: ({ ((unknown)) }),
				}),
				removed: ({ (number) }),
			}) }),
			destroyed: ({ (number) }),
		}))
			load_empty()
			local len_pos_10 = alloc(2)
			local len_55 = 0
			for k_10, v_10 in value.changes do
				len_55 = len_55 + 1
				local len_56 = #k_10
				alloc(2)
				buffer.writeu16(outgoing_buff, outgoing_apos, len_56)
				alloc(len_56)
				buffer.writestring(outgoing_buff, outgoing_apos, k_10, len_56)
				local len_57 = #v_10.added_or_changed.entities
				alloc(2)
				buffer.writeu16(outgoing_buff, outgoing_apos, len_57)
				for i_37 = 1, len_57 do
					local val_37 = v_10.added_or_changed.entities[i_37]
					alloc(4)
					buffer.writeu32(outgoing_buff, outgoing_apos, val_37)
				end
				local len_58 = #v_10.added_or_changed.values
				alloc(2)
				buffer.writeu16(outgoing_buff, outgoing_apos, len_58)
				for i_38 = 1, len_58 do
					local val_38 = v_10.added_or_changed.values[i_38]
					if val_38 == nil then
						alloc(1)
						buffer.writeu8(outgoing_buff, outgoing_apos, 0)
					else
						alloc(1)
						buffer.writeu8(outgoing_buff, outgoing_apos, 1)
						table.insert(outgoing_inst, val_38)
					end
				end
				local len_59 = #v_10.removed
				alloc(2)
				buffer.writeu16(outgoing_buff, outgoing_apos, len_59)
				for i_39 = 1, len_59 do
					local val_39 = v_10.removed[i_39]
					alloc(4)
					buffer.writeu32(outgoing_buff, outgoing_apos, val_39)
				end
			end
			buffer.writeu16(outgoing_buff, len_pos_10, len_55)
			local len_60 = #value.destroyed
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_60)
			for i_40 = 1, len_60 do
				local val_40 = value.destroyed[i_40]
				alloc(4)
				buffer.writeu32(outgoing_buff, outgoing_apos, val_40)
			end
			local buff = buffer.create(outgoing_used)
			buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)
			for player in set do
				unreliable[1]:FireClient(player, buff, outgoing_inst)
			end
		end,
	},
	client_ready = {
		on = function(callback: (player: Player) -> ()): () -> ()
			table.insert(reliable_events[0], callback)
			return function()
				table.remove(reliable_events[0], table.find(reliable_events[0], callback))
			end
		end,
	},
}
type Events = typeof(returns)
return returns
