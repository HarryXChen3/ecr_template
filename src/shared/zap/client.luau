--!native
--!optimize 2
--!nocheck
--!nolint
--#selene: allow(unused_variable, shadowing, incorrect_standard_library_use)
-- Client generated by Zap v0.6.1 (https://github.com/red-blox/zap)
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")

local outgoing_buff: buffer
local outgoing_used: number
local outgoing_size: number
local outgoing_inst: { Instance }
local outgoing_apos: number

local incoming_buff: buffer
local incoming_read: number
local incoming_inst: { Instance }
local incoming_ipos: number

-- thanks to https://dom.rojo.space/binary.html#cframe
local CFrameSpecialCases = {
	CFrame.Angles(0, 0, 0),
	CFrame.Angles(math.rad(90), 0, 0),
	CFrame.Angles(0, math.rad(180), math.rad(180)),
	CFrame.Angles(math.rad(-90), 0, 0),
	CFrame.Angles(0, math.rad(180), math.rad(90)),
	CFrame.Angles(0, math.rad(90), math.rad(90)),
	CFrame.Angles(0, 0, math.rad(90)),
	CFrame.Angles(0, math.rad(-90), math.rad(90)),
	CFrame.Angles(math.rad(-90), math.rad(-90), 0),
	CFrame.Angles(0, math.rad(-90), 0),
	CFrame.Angles(math.rad(90), math.rad(-90), 0),
	CFrame.Angles(0, math.rad(90), math.rad(180)),
	CFrame.Angles(0, math.rad(-90), math.rad(180)),
	CFrame.Angles(0, math.rad(180), math.rad(0)),
	CFrame.Angles(math.rad(-90), math.rad(-180), math.rad(0)),
	CFrame.Angles(0, math.rad(0), math.rad(180)),
	CFrame.Angles(math.rad(90), math.rad(180), math.rad(0)),
	CFrame.Angles(0, math.rad(0), math.rad(-90)),
	CFrame.Angles(0, math.rad(-90), math.rad(-90)),
	CFrame.Angles(0, math.rad(-180), math.rad(-90)),
	CFrame.Angles(0, math.rad(90), math.rad(-90)),
	CFrame.Angles(math.rad(90), math.rad(90), 0),
	CFrame.Angles(0, math.rad(90), 0),
	CFrame.Angles(math.rad(-90), math.rad(90), 0),
}

local function alloc(len: number)
	if outgoing_used + len > outgoing_size then
		while outgoing_used + len > outgoing_size do
			outgoing_size = outgoing_size * 2
		end

		local new_buff = buffer.create(outgoing_size)
		buffer.copy(new_buff, 0, outgoing_buff, 0, outgoing_used)

		outgoing_buff = new_buff
	end

	outgoing_apos = outgoing_used
	outgoing_used = outgoing_used + len

	return outgoing_apos
end

local function read(len: number)
	local pos = incoming_read
	incoming_read = incoming_read + len

	return pos
end

local function save()
	return {
		buff = outgoing_buff,
		used = outgoing_used,
		size = outgoing_size,
		inst = outgoing_inst,
	}
end

local function load(data: {
	buff: buffer,
	used: number,
	size: number,
	inst: { Instance },
})
	outgoing_buff = data.buff
	outgoing_used = data.used
	outgoing_size = data.size
	outgoing_inst = data.inst
end

local function load_empty()
	outgoing_buff = buffer.create(64)
	outgoing_used = 0
	outgoing_size = 64
	outgoing_inst = {}
end

load_empty()

local types = {}
if RunService:IsServer() then
	error("Cannot use the client module on the server!")
end

local reliable = ReplicatedStorage:WaitForChild("ZAP_RELIABLE")
local unreliable = ReplicatedStorage:WaitForChild("ZAP_UNRELIABLE")

assert(reliable:IsA("RemoteEvent"), "Expected ZAP_RELIABLE to be a RemoteEvent")
assert(unreliable:IsA("UnreliableRemoteEvent"), "Expected ZAP_UNRELIABLE to be an UnreliableRemoteEvent")

local time = 0

RunService.Heartbeat:Connect(function(dt)
	time += dt

	if time >= (1 / 61) then
		time -= (1 / 61)

		if outgoing_used ~= 0 then
			local buff = buffer.create(outgoing_used)
			buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)

			reliable:FireServer(buff, outgoing_inst)

			outgoing_buff = buffer.create(64)
			outgoing_used = 0
			outgoing_size = 64
			table.clear(outgoing_inst)
		end
	end
end)

local events = table.create(3)
local event_queue: { [number]: { any } } = table.create(3)
event_queue[2] = {}
event_queue[3] = {}
reliable.OnClientEvent:Connect(function(buff, inst)
	incoming_buff = buff
	incoming_inst = inst
	incoming_read = 0
	incoming_ipos = 0
	local len = buffer.len(buff)
	while incoming_read < len do
		local id = buffer.readu8(buff, read(1))
		if id == 2 then
			local value
			value = {}
			value.changes = {}
			for _ = 1, buffer.readu16(incoming_buff, read(2)) do
				local key
				local val
				local len = buffer.readu16(incoming_buff, read(2))
				key = buffer.readstring(incoming_buff, read(len), len)
				val = {}
				val.added_or_changed = {}
				val.added_or_changed.entities = {}
				local len = buffer.readu16(incoming_buff, read(2))
				for i = 1, len do
					val.added_or_changed.entities[i] = buffer.readu32(incoming_buff, read(4))
				end
				val.added_or_changed.values = {}
				local len = buffer.readu16(incoming_buff, read(2))
				for i = 1, len do
					if buffer.readu8(incoming_buff, read(1)) == 1 then
						incoming_ipos = incoming_ipos + 1
						val.added_or_changed.values[i] = incoming_inst[incoming_ipos]
					else
						val.added_or_changed.values[i] = nil
					end
				end
				val.removed = {}
				local len = buffer.readu16(incoming_buff, read(2))
				for i = 1, len do
					val.removed[i] = buffer.readu32(incoming_buff, read(4))
				end
				value.changes[key] = val
			end
			value.destroyed = {}
			local len = buffer.readu16(incoming_buff, read(2))
			for i = 1, len do
				value.destroyed[i] = buffer.readu32(incoming_buff, read(4))
			end
			if events[2] then
				events[2](value)
			else
				table.insert(event_queue[2], value)
				if #event_queue[2] > 64 then
					warn(`[ZAP] {#event_queue[2]} events in queue for replicate_world. Did you forget to attach a listener?`)
				end
			end
		else
			error("Unknown event id")
		end
	end
end)
unreliable.OnClientEvent:Connect(function(buff, inst)
	incoming_buff = buff
	incoming_inst = inst
	incoming_read = 0
	incoming_ipos = 0
	local id = buffer.readu8(buff, read(1))
	if id == 3 then
		local value
		value = {}
		value.changes = {}
		for _ = 1, buffer.readu16(incoming_buff, read(2)) do
			local key
			local val
			local len = buffer.readu16(incoming_buff, read(2))
			key = buffer.readstring(incoming_buff, read(len), len)
			val = {}
			val.added_or_changed = {}
			val.added_or_changed.entities = {}
			local len = buffer.readu16(incoming_buff, read(2))
			for i = 1, len do
				val.added_or_changed.entities[i] = buffer.readu32(incoming_buff, read(4))
			end
			val.added_or_changed.values = {}
			local len = buffer.readu16(incoming_buff, read(2))
			for i = 1, len do
				if buffer.readu8(incoming_buff, read(1)) == 1 then
					incoming_ipos = incoming_ipos + 1
					val.added_or_changed.values[i] = incoming_inst[incoming_ipos]
				else
					val.added_or_changed.values[i] = nil
				end
			end
			val.removed = {}
			local len = buffer.readu16(incoming_buff, read(2))
			for i = 1, len do
				val.removed[i] = buffer.readu32(incoming_buff, read(4))
			end
			value.changes[key] = val
		end
		value.destroyed = {}
		local len = buffer.readu16(incoming_buff, read(2))
		for i = 1, len do
			value.destroyed[i] = buffer.readu32(incoming_buff, read(4))
		end
		if events[3] then
			events[3](value)
		else
			table.insert(event_queue[3], value)
			if #event_queue[3] > 64 then
				warn(`[ZAP] {#event_queue[3]} events in queue for udp_replicate_world. Did you forget to attach a listener?`)
			end
		end
	else
		error("Unknown event id")
	end
end)
return {
	client_ready = {
		fire = function()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 1)
		end,
	},
	replicate_world = {
		set_callback = function(callback: (({
			changes: ({ [(string)]: ({
				added_or_changed: ({
					entities: ({ (number) }),
					values: ({ ((unknown)?) }),
				}),
				removed: ({ (number) }),
			}) }),
			destroyed: ({ (number) }),
		})) -> ())
			events[2] = callback
			for _, value in event_queue[2] do
				callback(value)
			end
			event_queue[2] = {}
		end,
	},
	udp_replicate_world = {
		set_callback = function(callback: (({
			changes: ({ [(string)]: ({
				added_or_changed: ({
					entities: ({ (number) }),
					values: ({ ((unknown)?) }),
				}),
				removed: ({ (number) }),
			}) }),
			destroyed: ({ (number) }),
		})) -> ())
			events[3] = callback
			for _, value in event_queue[3] do
				callback(value)
			end
			event_queue[3] = {}
		end,
	},
}
