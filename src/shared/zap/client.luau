--!native
--!optimize 2
--!nocheck
--!nolint
--#selene: allow(unused_variable, global_usage)
-- Client generated by Zap v0.6.17 (https://github.com/red-blox/zap)
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")

local outgoing_buff: buffer
local outgoing_used: number
local outgoing_size: number
local outgoing_inst: { Instance }
local outgoing_apos: number

local incoming_buff: buffer
local incoming_read: number
local incoming_inst: { Instance }
local incoming_ipos: number

-- thanks to https://dom.rojo.space/binary.html#cframe
local CFrameSpecialCases = {
	CFrame.Angles(0, 0, 0),
	CFrame.Angles(math.rad(90), 0, 0),
	CFrame.Angles(0, math.rad(180), math.rad(180)),
	CFrame.Angles(math.rad(-90), 0, 0),
	CFrame.Angles(0, math.rad(180), math.rad(90)),
	CFrame.Angles(0, math.rad(90), math.rad(90)),
	CFrame.Angles(0, 0, math.rad(90)),
	CFrame.Angles(0, math.rad(-90), math.rad(90)),
	CFrame.Angles(math.rad(-90), math.rad(-90), 0),
	CFrame.Angles(0, math.rad(-90), 0),
	CFrame.Angles(math.rad(90), math.rad(-90), 0),
	CFrame.Angles(0, math.rad(90), math.rad(180)),
	CFrame.Angles(0, math.rad(-90), math.rad(180)),
	CFrame.Angles(0, math.rad(180), math.rad(0)),
	CFrame.Angles(math.rad(-90), math.rad(-180), math.rad(0)),
	CFrame.Angles(0, math.rad(0), math.rad(180)),
	CFrame.Angles(math.rad(90), math.rad(180), math.rad(0)),
	CFrame.Angles(0, math.rad(0), math.rad(-90)),
	CFrame.Angles(0, math.rad(-90), math.rad(-90)),
	CFrame.Angles(0, math.rad(-180), math.rad(-90)),
	CFrame.Angles(0, math.rad(90), math.rad(-90)),
	CFrame.Angles(math.rad(90), math.rad(90), 0),
	CFrame.Angles(0, math.rad(90), 0),
	CFrame.Angles(math.rad(-90), math.rad(90), 0),
}

local function alloc(len: number)
	if outgoing_used + len > outgoing_size then
		while outgoing_used + len > outgoing_size do
			outgoing_size = outgoing_size * 2
		end

		local new_buff = buffer.create(outgoing_size)
		buffer.copy(new_buff, 0, outgoing_buff, 0, outgoing_used)

		outgoing_buff = new_buff
	end

	outgoing_apos = outgoing_used
	outgoing_used = outgoing_used + len

	return outgoing_apos
end

local function read(len: number)
	local pos = incoming_read
	incoming_read = incoming_read + len

	return pos
end

local function save()
	return {
		buff = outgoing_buff,
		used = outgoing_used,
		size = outgoing_size,
		inst = outgoing_inst,
	}
end

local function load(data: {
	buff: buffer,
	used: number,
	size: number,
	inst: { Instance },
})
	outgoing_buff = data.buff
	outgoing_used = data.used
	outgoing_size = data.size
	outgoing_inst = data.inst
end

local function load_empty()
	outgoing_buff = buffer.create(64)
	outgoing_used = 0
	outgoing_size = 64
	outgoing_inst = {}
end

load_empty()

local types = {}
if not RunService:IsRunning() then
	local noop = function() end
	return table.freeze({
		send_events = noop,
		client_ready = table.freeze({
			fire = noop
		}),
		replicate_world = table.freeze({
			set_callback = noop
		}),
		udp_replicate_world = table.freeze({
			set_callback = noop
		}),
	}) :: Events
end
if RunService:IsServer() then
	error("Cannot use the client module on the server!")
end
local remotes = ReplicatedStorage:WaitForChild("ZAP")

local reliable = remotes:WaitForChild("ZAP_RELIABLE")
assert(reliable:IsA("RemoteEvent"), "Expected ZAP_RELIABLE to be a RemoteEvent")

local unreliable = { remotes:WaitForChild("ZAP_UNRELIABLE_0") }
assert(unreliable[1]:IsA("UnreliableRemoteEvent"), "Expected ZAP_UNRELIABLE_0 to be an UnreliableRemoteEvent")

local function send_events()
	if outgoing_used ~= 0 then
		local buff = buffer.create(outgoing_used)
		buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)

		reliable:FireServer(buff, outgoing_inst)

		outgoing_buff = buffer.create(64)
		outgoing_used = 0
		outgoing_size = 64
		table.clear(outgoing_inst)
	end
end

RunService.Heartbeat:Connect(send_events)

local reliable_events = table.create(1)
local reliable_event_queue: { [number]: { any } } = table.create(1)
local unreliable_events = table.create(1)
local unreliable_event_queue: { [number]: { any } } = table.create(1)
reliable_event_queue[0] = {}
unreliable_event_queue[0] = {}
reliable.OnClientEvent:Connect(function(buff, inst)
	incoming_buff = buff
	incoming_inst = inst
	incoming_read = 0
	incoming_ipos = 0
	local len = buffer.len(buff)
	while incoming_read < len do
		local id = buffer.readu8(buff, read(1))
		if id == 0 then
			local value
			value = {}
			value.changes = {}
			for _ = 1, buffer.readu16(incoming_buff, read(2)) do
				local key_1
				local val_1
				local len_1 = buffer.readu16(incoming_buff, read(2))
				key_1 = buffer.readstring(incoming_buff, read(len_1), len_1)
				val_1 = {}
				val_1.added_or_changed = {}
				val_1.added_or_changed.entities = {}
				local len_2 = buffer.readu16(incoming_buff, read(2))
				for i_1 = 1, len_2 do
					local val_2
					val_2 = buffer.readu32(incoming_buff, read(4))
					val_1.added_or_changed.entities[i_1] = val_2
				end
				val_1.added_or_changed.values = {}
				local len_3 = buffer.readu16(incoming_buff, read(2))
				for i_2 = 1, len_3 do
					local val_3
					if buffer.readu8(incoming_buff, read(1)) == 1 then
						incoming_ipos = incoming_ipos + 1
						val_3 = incoming_inst[incoming_ipos]
					else
						val_3 = nil
					end
					val_1.added_or_changed.values[i_2] = val_3
				end
				val_1.removed = {}
				local len_4 = buffer.readu16(incoming_buff, read(2))
				for i_3 = 1, len_4 do
					local val_4
					val_4 = buffer.readu32(incoming_buff, read(4))
					val_1.removed[i_3] = val_4
				end
				value.changes[key_1] = val_1
			end
			value.destroyed = {}
			local len_5 = buffer.readu16(incoming_buff, read(2))
			for i_4 = 1, len_5 do
				local val_5
				val_5 = buffer.readu32(incoming_buff, read(4))
				value.destroyed[i_4] = val_5
			end
			if reliable_events[0] then
				reliable_events[0](value)
			else
				table.insert(reliable_event_queue[0], value)
				if #reliable_event_queue[0] > 64 then
					warn(`[ZAP] {#reliable_event_queue[0]} events in queue for replicate_world. Did you forget to attach a listener?`)
				end
			end
		else
			error("Unknown event id")
		end
	end
end)
unreliable[1].OnClientEvent:Connect(function(buff, inst)
	incoming_buff = buff
	incoming_inst = inst
	incoming_read = 0
	incoming_ipos = 0
	local value
	value = {}
	value.changes = {}
	for _ = 1, buffer.readu16(incoming_buff, read(2)) do
		local key_2
		local val_6
		local len_6 = buffer.readu16(incoming_buff, read(2))
		key_2 = buffer.readstring(incoming_buff, read(len_6), len_6)
		val_6 = {}
		val_6.added_or_changed = {}
		val_6.added_or_changed.entities = {}
		local len_7 = buffer.readu16(incoming_buff, read(2))
		for i_5 = 1, len_7 do
			local val_7
			val_7 = buffer.readu32(incoming_buff, read(4))
			val_6.added_or_changed.entities[i_5] = val_7
		end
		val_6.added_or_changed.values = {}
		local len_8 = buffer.readu16(incoming_buff, read(2))
		for i_6 = 1, len_8 do
			local val_8
			if buffer.readu8(incoming_buff, read(1)) == 1 then
				incoming_ipos = incoming_ipos + 1
				val_8 = incoming_inst[incoming_ipos]
			else
				val_8 = nil
			end
			val_6.added_or_changed.values[i_6] = val_8
		end
		val_6.removed = {}
		local len_9 = buffer.readu16(incoming_buff, read(2))
		for i_7 = 1, len_9 do
			local val_9
			val_9 = buffer.readu32(incoming_buff, read(4))
			val_6.removed[i_7] = val_9
		end
		value.changes[key_2] = val_6
	end
	value.destroyed = {}
	local len_10 = buffer.readu16(incoming_buff, read(2))
	for i_8 = 1, len_10 do
		local val_10
		val_10 = buffer.readu32(incoming_buff, read(4))
		value.destroyed[i_8] = val_10
	end
	if unreliable_events[0] then
		unreliable_events[0](value)
	else
		table.insert(unreliable_event_queue[0], value)
		if #unreliable_event_queue[0] > 64 then
			warn(`[ZAP] {#unreliable_event_queue[0]} events in queue for udp_replicate_world. Did you forget to attach a listener?`)
		end
	end
end)
local returns = {
	send_events = send_events,
	client_ready = {
		fire = function()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 0)
		end,
	},
	replicate_world = {
		set_callback = function(callback: (value: ({
			changes: ({ [(string)]: ({
				added_or_changed: ({
					entities: ({ (number) }),
					values: ({ ((unknown)) }),
				}),
				removed: ({ (number) }),
			}) }),
			destroyed: ({ (number) }),
		})) -> ()): () -> ()
			reliable_events[0] = callback
			for _, value in reliable_event_queue[0] do
				callback(value				)

			end
			reliable_event_queue[0] = {}
			return function()
				reliable_events[0] = nil
			end
		end,
	},
	udp_replicate_world = {
		set_callback = function(callback: (value: ({
			changes: ({ [(string)]: ({
				added_or_changed: ({
					entities: ({ (number) }),
					values: ({ ((unknown)) }),
				}),
				removed: ({ (number) }),
			}) }),
			destroyed: ({ (number) }),
		})) -> ()): () -> ()
			unreliable_events[0] = callback
			for _, value in unreliable_event_queue[0] do
				callback(value				)

			end
			unreliable_event_queue[0] = {}
			return function()
				unreliable_events[0] = nil
			end
		end,
	},
}
type Events = typeof(returns)
return returns
